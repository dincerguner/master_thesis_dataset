1:LVR:NEG:0:org.apache.xalan.lib.sql.QueryParameter@<init>():40:-1 |==> 0
2:LVR:NEG:POS:org.apache.xalan.lib.sql.QueryParameter@<init>():40:-1 |==> 1
3:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>():40:m_type = -1 |==> <NO-OP>
4:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>():41:m_name = null |==> <NO-OP>
5:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>():42:m_value = null |==> <NO-OP>
6:LVR:FALSE:TRUE:org.apache.xalan.lib.sql.QueryParameter@<init>():43:false |==> true
7:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>():43:m_output = false |==> <NO-OP>
8:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>():44:m_typeName = null |==> <NO-OP>
9:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String):53:m_name = null |==> <NO-OP>
10:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String):54:m_value = v |==> <NO-OP>
11:LVR:FALSE:TRUE:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String):55:false |==> true
12:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String):55:m_output = false |==> <NO-OP>
13:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String):56:setTypeName(t) |==> <NO-OP>
14:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String,java.lang.String,boolean):61:m_name = name |==> <NO-OP>
15:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String,java.lang.String,boolean):62:m_value = value |==> <NO-OP>
16:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String,java.lang.String,boolean):63:m_output = out_flag |==> <NO-OP>
17:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@<init>(java.lang.String,java.lang.String,java.lang.String,boolean):64:setTypeName(type) |==> <NO-OP>
18:EVR:<IDENTIFIER(java.lang.String)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@getValue():71:m_value |==> null
19:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@setValue(java.lang.String):79:m_value = newValue |==> <NO-OP>
20:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@setTypeName(java.lang.String):88:m_type = map_type(newType) |==> <NO-OP>
21:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@setTypeName(java.lang.String):89:m_typeName = newType |==> <NO-OP>
22:EVR:<IDENTIFIER(java.lang.String)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@getTypeName():97:m_typeName |==> null
23:EVR:<IDENTIFIER(int)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@getType():105:m_type |==> 0
24:EVR:<IDENTIFIER(java.lang.String)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@getName():113:m_name |==> null
25:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@setName(java.lang.String):123:m_name = n |==> <NO-OP>
26:EVR:<IDENTIFIER(boolean)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@isOutput():131:m_output |==> false
27:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@setIsOutput(boolean):141:m_output = flag |==> <NO-OP>
28:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):146:m_Typetable == null |==> false
29:STD:<ASSIGN>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):149:m_Typetable = new Hashtable() |==> <NO-OP>
30:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):150:m_Typetable.put("BIGINT", new Integer(java.sql.Types.BIGINT)) |==> <NO-OP>
31:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):151:m_Typetable.put("BINARY", new Integer(java.sql.Types.BINARY)) |==> <NO-OP>
32:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):152:m_Typetable.put("BIT", new Integer(java.sql.Types.BIT)) |==> <NO-OP>
33:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):153:m_Typetable.put("CHAR", new Integer(java.sql.Types.CHAR)) |==> <NO-OP>
34:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):154:m_Typetable.put("DATE", new Integer(java.sql.Types.DATE)) |==> <NO-OP>
35:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):155:m_Typetable.put("DECIMAL", new Integer(java.sql.Types.DECIMAL)) |==> <NO-OP>
36:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):156:m_Typetable.put("DOUBLE", new Integer(java.sql.Types.DOUBLE)) |==> <NO-OP>
37:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):157:m_Typetable.put("FLOAT", new Integer(java.sql.Types.FLOAT)) |==> <NO-OP>
38:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):158:m_Typetable.put("INTEGER", new Integer(java.sql.Types.INTEGER)) |==> <NO-OP>
39:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):159:m_Typetable.put("LONGVARBINARY", new Integer(java.sql.Types.LONGVARBINARY)) |==> <NO-OP>
40:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):160:m_Typetable.put("LONGVARCHAR", new Integer(java.sql.Types.LONGVARCHAR)) |==> <NO-OP>
41:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):161:m_Typetable.put("NULL", new Integer(java.sql.Types.NULL)) |==> <NO-OP>
42:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):162:m_Typetable.put("NUMERIC", new Integer(java.sql.Types.NUMERIC)) |==> <NO-OP>
43:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):163:m_Typetable.put("OTHER", new Integer(java.sql.Types.OTHER)) |==> <NO-OP>
44:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):164:m_Typetable.put("REAL", new Integer(java.sql.Types.REAL)) |==> <NO-OP>
45:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):165:m_Typetable.put("SMALLINT", new Integer(java.sql.Types.SMALLINT)) |==> <NO-OP>
46:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):166:m_Typetable.put("TIME", new Integer(java.sql.Types.TIME)) |==> <NO-OP>
47:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):167:m_Typetable.put("TIMESTAMP", new Integer(java.sql.Types.TIMESTAMP)) |==> <NO-OP>
48:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):168:m_Typetable.put("TINYINT", new Integer(java.sql.Types.TINYINT)) |==> <NO-OP>
49:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):169:m_Typetable.put("VARBINARY", new Integer(java.sql.Types.VARBINARY)) |==> <NO-OP>
50:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):170:m_Typetable.put("VARCHAR", new Integer(java.sql.Types.VARCHAR)) |==> <NO-OP>
51:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):173:m_Typetable.put("STRING", new Integer(java.sql.Types.VARCHAR)) |==> <NO-OP>
52:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):174:m_Typetable.put("BIGDECIMAL", new Integer(java.sql.Types.NUMERIC)) |==> <NO-OP>
53:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):175:m_Typetable.put("BOOLEAN", new Integer(java.sql.Types.BIT)) |==> <NO-OP>
54:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):176:m_Typetable.put("BYTES", new Integer(java.sql.Types.LONGVARBINARY)) |==> <NO-OP>
55:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):177:m_Typetable.put("LONG", new Integer(java.sql.Types.BIGINT)) |==> <NO-OP>
56:STD:<CALL>:<NO-OP>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):178:m_Typetable.put("SHORT", new Integer(java.sql.Types.SMALLINT)) |==> <NO-OP>
57:EVR:<TYPE_CAST(java.lang.Integer)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):181:(Integer)m_Typetable.get(typename.toUpperCase()) |==> null
58:ROR:==(java.lang.Object,java.lang.Object):FALSE(java.lang.Object,java.lang.Object):org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):183:type == null |==> false
59:EVR:<MEMBER_SELECT(int)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):184:java.sql.Types.OTHER |==> 0
60:EVR:<METHOD_INVOCATION(int)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):186:type.intValue() |==> 0
61:EVR:<PARENTHESIZED(int)>:<DEFAULT>:org.apache.xalan.lib.sql.QueryParameter@map_type(java.lang.String):188:(rtype) |==> 0
